---
import "../styles/global.css";
import ThemeToggle from "../components/ThemeToggle.astro";
import LangToggle from "../components/LangToggle.astro";
import PartnersStrip from "../components/PartnersStrip.astro";
import { Icon } from "astro-icon/components";

const SITE = "https://blog.swiftyjourney.com";

// Props por página
const {
  title = "Swifty Journey Blog",
  description = "Exploring iOS, Swift and SwiftUI through articles, tutorials and development experiences",
  lang = "en",
  toEn: customToEn,
  toEs: customToEs,
} = Astro.props;

// Ruta actual (e.g. /en/blog)
const path = Astro.url.pathname || "/";

/** Diccionario de slugs por idioma */
const slugMap: Record<"en" | "es", Record<string, string>> = {
  en: {
    blog: "blog",
    resources: "recursos",
  },
  es: {
    blog: "blog", 
    recursos: "resources",
  },
};

/** Traduce el primer segmento de una ruta al otro idioma */
function translateFirstSegment(
  currentLang: "en" | "es",
  otherLang: "en" | "es",
  pathname: string,
) {
  // quita el prefijo /en/ o /es/
  const bare = pathname.replace(/^\/(en|es)\//, "");
  const parts = bare.split("/").filter(Boolean);

  if (parts.length === 0) {
    return `/${otherLang}/`;
  }

  const first = parts[0];
  const mapped = (slugMap[currentLang] && slugMap[currentLang][first]) || first;

  const rebuilt = `/${otherLang}/${[mapped, ...parts.slice(1)].join("/")}`;
  return rebuilt.endsWith("/") ? rebuilt : rebuilt + "/";
}

const isEN = path.startsWith("/en/") || (!path.startsWith("/en/") && !path.startsWith("/es/"));
const isES = path.startsWith("/es/");
const currentLang = isEN ? "en" : "es";
const otherLang = currentLang === "es" ? "en" : "es";

// URLs alternas correctas (usar custom si está disponible)
const toEn = customToEn || (isEN ? path : translateFirstSegment("es", "en", path));
const toEs = customToEs || (isES ? path : translateFirstSegment("en", "es", path));

// Canonical y hreflang
const canonical = new URL(path, SITE).toString();
const hrefEn = new URL(toEn, SITE).toString();
const hrefEs = new URL(toEs, SITE).toString();

// Home por idioma
const homeHref = lang === "en" ? "/en/" : "/es/";
---

<html lang={lang} class="min-h-full">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <!-- Canonical + hreflang -->
    <link rel="canonical" href={canonical} />
    <link rel="alternate" href={hrefEn} hreflang="en" />
    <link rel="alternate" href={hrefEs} hreflang="es-mx" />
    <link rel="alternate" href={SITE + "/"} hreflang="x-default" />

    <link rel="icon" href="/favicon.svg" />

    <!-- Evita "flash" de tema -->
    <script is:inline>
      (function () {
        const key = "theme";
        const saved = localStorage.getItem(key);
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        const useDark = (saved ?? (prefersDark ? "dark" : "light")) === "dark";
        if (useDark) document.documentElement.classList.add("dark");
      })();
    </script>

    <!-- Open Graph / Twitter básicos -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonical} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
  </head>

  <body
    class="bg-white text-zinc-900 dark:bg-zinc-900 dark:text-zinc-100 antialiased"
  >
    <!-- Header sticky + blur -->
    <header
      class="sticky top-0 z-50 backdrop-blur supports-[backdrop-filter]:bg-white/70 dark:supports-[backdrop-filter]:bg-zinc-900/70"
    >
      <div
        class="max-w-6xl mx-auto px-4 py-3 md:py-4 flex items-center justify-between"
      >
        <a
          href={homeHref}
          class="flex items-center gap-2"
          aria-label="Swifty Journey Blog — Home"
        >
          <!-- Logo light/dark -->
          <img
            src="/logo-light.svg"
            alt="Swifty Journey"
            width="192"
            height="48"
            class="h-12 w-auto block dark:hidden"
          />
          <img
            src="/logo-dark.svg"
            alt="Swifty Journey"
            width="192"
            height="48"
            class="h-12 w-auto hidden dark:block"
          />
          <span class="text-sm text-zinc-600 dark:text-zinc-400 ml-2">Blog</span>
        </a>

        <nav class="flex items-center gap-2">
          <a
            href={lang === "en" ? "https://swiftyjourney.com/en/" : "https://swiftyjourney.com/es/"}
            class="px-3 py-1.5 text-sm text-zinc-700 dark:text-zinc-300 hover:text-zinc-900 dark:hover:text-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-colors"
          >
            ← {lang === "en" ? "Main Site" : "Sitio Principal"}
          </a>
          <LangToggle lang={lang} toEn={toEn} toEs={toEs} />
          <div class="ml-2">
            <ThemeToggle />
          </div>
        </nav>
      </div>
    </header>

    <main class="max-w-6xl mx-auto px-4">
      <slot />
    </main>

    <!-- Partners/Affiliates Section -->
    <div class="max-w-6xl mx-auto px-4">
      <PartnersStrip
        title={lang === "en" ? "Development Resources" : "Recursos de Desarrollo"}
        ctaHref={lang === "en" ? "/en/resources/" : "/es/recursos/"}
        ctaLabel={lang === "en" ? "See resources" : "Ver recursos"}
        logoSrc="/partners/bms/bms_logo.png"
        desc={lang === "en" ? "Curated SwiftUI learning resources and development tools" : "Recursos seleccionados para aprender SwiftUI y herramientas de desarrollo"}
        disclaimer={lang === "en" ? "Some links are affiliate. You pay the same price — a small commission may support this site." : "Algunos enlaces son de afiliado. Pagas lo mismo; una pequeña comisión puede apoyar este sitio."}
      />
    </div>

    <footer class="max-w-6xl mx-auto px-4 py-10 opacity-80">
      <div class="flex flex-col items-center gap-4">
        <div class="flex gap-4 text-2xl">
          <a
            href="https://github.com/swiftyjourney"
            target="_blank"
            rel="noopener me"
            class="hover:opacity-100 opacity-80"
          >
            <Icon name="mdi:github" />
          </a>
          <a
            href="https://x.com/jfdoradotr"
            target="_blank"
            rel="noopener me"
            class="hover:opacity-100 opacity-80"
          >
            <Icon name="mdi:twitter" />
          </a>
          <a
            href="https://linkedin.com/in/juanfranciscodoradotorres"
            target="_blank"
            rel="noopener me"
            class="hover:opacity-100 opacity-80"
          >
            <Icon name="mdi:linkedin" />
          </a>
        </div>
        <p class="text-sm">© {new Date().getFullYear()} Swifty Journey</p>
      </div>
    </footer>
    
    <!-- Hidden language icons for client-side use -->
    <div id="language-icons" style="display: none;">
      <div data-lang="swift"><Icon name="mdi:language-swift" /></div>
      <div data-lang="typescript"><Icon name="mdi:language-typescript" /></div>
      <div data-lang="javascript"><Icon name="mdi:language-javascript" /></div>
      <div data-lang="json"><Icon name="mdi:code-json" /></div>
      <div data-lang="html"><Icon name="mdi:language-html5" /></div>
      <div data-lang="css"><Icon name="mdi:language-css3" /></div>
      <div data-lang="bash"><Icon name="mdi:bash" /></div>
      <div data-lang="shell"><Icon name="mdi:bash" /></div>
      <div data-lang="python"><Icon name="mdi:language-python" /></div>
      <div data-lang="yaml"><Icon name="mdi:code" /></div>
      <div data-lang="markdown"><Icon name="mdi:language-markdown" /></div>
      <div data-lang="powershell"><Icon name="mdi:powershell" /></div>
      <div data-lang="xml"><Icon name="mdi:xml" /></div>
      <div data-lang="code"><Icon name="mdi:code" /></div>
    </div>

    <!-- Copy code functionality -->
    <script>
      // GitHub Gist style code blocks with header
      document.addEventListener('DOMContentLoaded', function() {
        const codeBlocks = document.querySelectorAll('pre code');
        
        // Get language icon from pre-rendered icons
        const getLanguageIcon = (language) => {
          const iconContainer = document.getElementById('language-icons');
          const iconDiv = iconContainer.querySelector(`[data-lang="${language.toLowerCase()}"]`);
          return iconDiv ? iconDiv.innerHTML : iconContainer.querySelector('[data-lang="code"]').innerHTML;
        };
        
        codeBlocks.forEach((codeBlock) => {
          const pre = codeBlock.parentNode;
          
          // Skip if header already exists
          if (pre.querySelector('.code-header')) return;
          
          // Detect language
          const classNames = codeBlock.className;
          let language = classNames.match(/language-(\w+)/)?.[1] || 
                        classNames.match(/lang-(\w+)/)?.[1];
          
          // Fallback: check parent pre element for language class
          if (!language) {
            const preClasses = pre.className;
            language = preClasses.match(/language-(\w+)/)?.[1] || 
                      preClasses.match(/lang-(\w+)/)?.[1];
          }
          
          // Final fallback: try to detect from content
          if (!language) {
            const content = codeBlock.textContent || '';
            if (content.includes('import SwiftUI') || content.includes('struct ') && content.includes('View')) {
              language = 'swift';
            } else if (content.includes('interface ') || content.includes('type ')) {
              language = 'typescript';
            } else if (content.includes('function ') || content.includes('const ')) {
              language = 'javascript';
            }
          }
          
          language = language || 'code';
          console.log('Final detected language:', language);
          
          // Create header
          const header = document.createElement('div');
          header.className = 'code-header';
          
          // Language info section
          const languageInfo = document.createElement('div');
          languageInfo.className = 'language-info';
          
          // Language icon using astro-icon
          const iconHtml = getLanguageIcon(language);
          const languageIcon = document.createElement('div');
          languageIcon.innerHTML = iconHtml;
          languageIcon.className = 'language-icon';
          
          // Language name
          const languageName = document.createElement('span');
          languageName.className = 'language-name';
          languageName.textContent = language.charAt(0).toUpperCase() + language.slice(1);
          
          languageInfo.appendChild(languageIcon);
          languageInfo.appendChild(languageName);
          
          // Actions section
          const codeActions = document.createElement('div');
          codeActions.className = 'code-actions';
          
          // Copy button
          const copyButton = document.createElement('button');
          copyButton.className = 'copy-button';
          copyButton.textContent = 'Copy';
          copyButton.setAttribute('aria-label', 'Copy code to clipboard');
          
          // Copy functionality
          copyButton.addEventListener('click', async () => {
            try {
              const code = codeBlock.textContent || '';
              await navigator.clipboard.writeText(code);
              
              // Visual feedback
              const originalText = copyButton.textContent;
              copyButton.textContent = 'Copied!';
              copyButton.classList.add('copied');
              
              setTimeout(() => {
                copyButton.textContent = originalText;
                copyButton.classList.remove('copied');
              }, 2000);
              
            } catch (err) {
              console.error('Failed to copy code:', err);
              
              // Fallback for older browsers
              const textArea = document.createElement('textarea');
              textArea.value = codeBlock.textContent || '';
              document.body.appendChild(textArea);
              textArea.select();
              document.execCommand('copy');
              document.body.removeChild(textArea);
              
              copyButton.textContent = 'Copied!';
              copyButton.classList.add('copied');
              
              setTimeout(() => {
                copyButton.textContent = 'Copy';
                copyButton.classList.remove('copied');
              }, 2000);
            }
          });
          
          codeActions.appendChild(copyButton);
          
          // Assemble header
          header.appendChild(languageInfo);
          header.appendChild(codeActions);
          
          // Insert header at the beginning of pre
          pre.insertBefore(header, codeBlock);
        });
      });
    </script>
  </body>
</html>